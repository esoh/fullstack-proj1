type Employee @model {
  id: ID!
  firstname: String!
  lastname: String!
  skills: [ID]
  address: [Address]
}

type Address {
  line1: String!,
  line2: String,
  city: String,
  state: String,
  zipcode: String,
}

type Skill @model {
  id: ID!
  name: String!
}

input LambdaCreateSkillInput {
  name: String!
}

input LambdaUpdateSkillInput {
  id: ID!
  name: String
}

input LambdaDeleteSkillInput {
  id: ID!
}

input LambdaCreateEmployeeInput {
  firstname: String!
  lastname: String!
  skills: [ID]
  address: [AddressInput]
}

input LambdaUpdateEmployeeInput {
  id: ID!
  firstname: String
  lastname: String
  skills: [ID]
  address: [AddressInput]
}

input LambdaDeleteEmployeeInput {
  id: ID!
}

input AddressInput {
  line1: String!
  line2: String
  city: String
  state: String
  zipcode: String
}

type Mutation {
  lambdaCreateSkill(operation: String!, input: LambdaCreateSkillInput!): String @function(name: "skillfunction-${env}")
  lambdaUpdateSkill(operation: String!, input: LambdaUpdateSkillInput!): String @function(name: "skillfunction-${env}")
  lambdaDeleteSkill(operation: String!, input: LambdaDeleteSkillInput!): String @function(name: "skillfunction-${env}")
  lambdaCreateEmployee(operation: String!, input: LambdaCreateEmployeeInput!): String @function(name: "employeefunction-${env}")
  lambdaUpdateEmployee(operation: String!, input: LambdaUpdateEmployeeInput!): String @function(name: "employeefunction-${env}")
  lambdaDeleteEmployee(operation: String!, input: LambdaDeleteEmployeeInput!): String @function(name: "employeefunction-${env}")
}

